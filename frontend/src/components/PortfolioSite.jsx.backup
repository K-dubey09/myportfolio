import React, { useState, useEffect } from 'react'

const API_BASE_URL = 'http://localhost:5000'

const PortfolioSite = () => {
  // State for each section's data
  const [profile, setProfile] = useState(null)
  const [services, setServices] = useState([])
  const [projects, setProjects] = useState([])
  const [experience, setExperience] = useState([])
  const [education, setEducation] = useState([])
  const [blogs, setBlogs] = useState([])
  const [contactInfo, setContactInfo] = useState(null)
  const [loading, setLoading] = useState(true)
  
  // Contact form state
  const [contactForm, setContactForm] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  })
  const [contactStatus, setContactStatus] = useState({ type: '', message: '' })
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Fetch data from MongoDB
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        
        // Fetch all data in parallel
        const [profileRes, servicesRes, projectsRes, experienceRes, educationRes, blogsRes, contactInfoRes] = await Promise.all([
          fetch(`${API_BASE_URL}/api/profile`),
          fetch(`${API_BASE_URL}/api/services`),
          fetch(`${API_BASE_URL}/api/projects`),
          fetch(`${API_BASE_URL}/api/experiences`),
          fetch(`${API_BASE_URL}/api/education`),
          fetch(`${API_BASE_URL}/api/blogs`),
          fetch(`${API_BASE_URL}/api/contact-info`)
        ])

        const [profileData, servicesData, projectsData, experienceData, educationData, blogsData, contactInfoData] = await Promise.all([
          profileRes.json(),
          servicesRes.json(),
          projectsRes.json(),
          experienceRes.json(),
          educationRes.json(),
          blogsRes.json(),
          contactInfoRes.json()
        ])

        // Set data, limiting to 2-3 items per section
        setProfile(profileData)
        setServices(Array.isArray(servicesData) ? servicesData.slice(0, 3) : (servicesData.services?.slice(0, 3) || []))
        setProjects(Array.isArray(projectsData) ? projectsData.slice(0, 3) : (projectsData.projects?.slice(0, 3) || []))
        setExperience(Array.isArray(experienceData) ? experienceData.slice(0, 2) : (experienceData.experience?.slice(0, 2) || []))
        setEducation(Array.isArray(educationData) ? educationData.slice(0, 2) : (educationData.education?.slice(0, 2) || []))
        setBlogs(Array.isArray(blogsData) ? blogsData.slice(0, 3) : (blogsData.blogs?.slice(0, 3) || []))
        setContactInfo(contactInfoData)
        
        console.log('Services data:', servicesData)
        console.log('Projects data:', projectsData)
        console.log('Experience data:', experienceData)
        console.log('Education data:', educationData)
        console.log('Blogs data:', blogsData)
        console.log('Contact info data:', contactInfoData)
        
      } catch (error) {
        console.error('Error fetching data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  // Handle contact form input changes
  const handleContactInputChange = (e) => {
    const { name, value } = e.target
    setContactForm(prev => ({
      ...prev,
      [name]: value
    }))
  }

  // Handle contact form submission
  const handleContactSubmit = async (e) => {
    e.preventDefault()
    setIsSubmitting(true)
    setContactStatus({ type: '', message: '' })

    try {
      const response = await fetch(`${API_BASE_URL}/api/contacts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(contactForm)
      })

      if (response.ok) {
        setContactStatus({
          type: 'success',
          message: 'Thank you! Your message has been sent successfully. I\'ll get back to you soon.'
        })
        setContactForm({ name: '', email: '', subject: '', message: '' })
      } else {
        throw new Error('Failed to send message')
      }
    } catch (error) {
      console.error('Error sending message:', error)
      setContactStatus({
        type: 'error',
        message: 'Sorry, there was an error sending your message. Please try again later.'
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  if (loading) {
    return (
      <div className="portfolio-site">
        <div className="loading">Loading...</div>
      </div>
    )
  }
  return (
    <div className="portfolio-site">
      {/* Home Section */}
      <section id="top" className="section home-section">
        <div className="container">
          <div className="hero-content">
            {profile?.profilePicture && (
              <div className="profile-image">
                <img 
                  src={profile.profilePicture} 
                  alt={profile.name || 'Profile'} 
                  className="profile-pic"
                />
              </div>
            )}
            <div className="hero-text">
              <h1>Welcome to My Portfolio</h1>
              {profile?.name && <h2>I'm {profile.name}</h2>}
              {profile?.title && <h3>{profile.title}</h3>}
              {profile?.bio ? (
                <p>{profile.bio}</p>
              ) : (
                <p>This is the home section.</p>
              )}
              
              {/* Key Social Links */}
              {profile?.socialLinks && Object.values(profile.socialLinks).some(value => value && value.trim() !== '') && (
                <div className="social-links-home">
                  {profile.socialLinks.linkedin && profile.socialLinks.linkedin.trim() !== '' && (
                    <a href={profile.socialLinks.linkedin} target="_blank" rel="noopener noreferrer" className="social-btn linkedin" title="LinkedIn">
                      <span className="social-icon">üíº</span>
                      <span className="social-text">LinkedIn</span>
                    </a>
                  )}
                  {profile.socialLinks.github && profile.socialLinks.github.trim() !== '' && (
                    <a href={profile.socialLinks.github} target="_blank" rel="noopener noreferrer" className="social-btn github" title="GitHub">
                      <span className="social-icon">üêô</span>
                      <span className="social-text">GitHub</span>
                    </a>
                  )}
                  {profile.socialLinks.twitter && profile.socialLinks.twitter.trim() !== '' && (
                    <a href={profile.socialLinks.twitter} target="_blank" rel="noopener noreferrer" className="social-btn twitter" title="Twitter">
                      <span className="social-icon">üê¶</span>
                      <span className="social-text">Twitter</span>
                    </a>
                  )}
                  {profile.socialLinks.youtube && profile.socialLinks.youtube.trim() !== '' && (
                    <a href={profile.socialLinks.youtube} target="_blank" rel="noopener noreferrer" className="social-btn youtube" title="YouTube">
                      <span className="social-icon">üì∫</span>
                      <span className="social-text">YouTube</span>
                    </a>
                  )}
                </div>
              )}

              {/* Key Professional Platforms */}
              {profile?.professionalContacts && Object.values(profile.professionalContacts).some(value => value && value.trim() !== '') && (
                <div className="professional-links-home">
                  <h4>Professional Platforms</h4>
                  <div className="professional-links-grid">
                    {profile.professionalContacts.stackoverflow && profile.professionalContacts.stackoverflow.trim() !== '' && (
                      <a href={profile.professionalContacts.stackoverflow} target="_blank" rel="noopener noreferrer" className="platform-btn stackoverflow" title="Stack Overflow">
                        <span className="platform-icon">üîß</span>
                        <span className="platform-text">Stack Overflow</span>
                      </a>
                    )}
                    {profile.professionalContacts.leetcode && profile.professionalContacts.leetcode.trim() !== '' && (
                      <a href={profile.professionalContacts.leetcode} target="_blank" rel="noopener noreferrer" className="platform-btn leetcode" title="LeetCode">
                        <span className="platform-icon">üíª</span>
                        <span className="platform-text">LeetCode</span>
                      </a>
                    )}
                    {profile.professionalContacts.medium && profile.professionalContacts.medium.trim() !== '' && (
                      <a href={profile.professionalContacts.medium} target="_blank" rel="noopener noreferrer" className="platform-btn medium" title="Medium">
                        <span className="platform-icon">üìù</span>
                        <span className="platform-text">Medium</span>
                      </a>
                    )}
                    {profile.professionalContacts.devto && profile.professionalContacts.devto.trim() !== '' && (
                      <a href={profile.professionalContacts.devto} target="_blank" rel="noopener noreferrer" className="platform-btn devto" title="Dev.to">
                        <span className="platform-icon">üë®‚Äçüíª</span>
                        <span className="platform-text">Dev.to</span>
                      </a>
                    )}
                  </div>
                </div>
              )}

              {/* Contact Actions */}
              <div className="hero-actions">
                {contactInfo?.email && (
                  <a href={`mailto:${contactInfo.email}`} className="cta-button primary">
                    üìß Get In Touch
                  </a>
                )}
                {profile?.resume && (
                  <a href={profile.resume} target="_blank" rel="noopener noreferrer" className="cta-button secondary">
                    üìÑ View Resume
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Services Section */}
      <section id="services" className="section services-section">
        <div className="container">
          <div className="section-header">
            <h2>Services</h2>
            <a href="/services" className="view-all-link">View All</a>
          </div>
          <div className="services-grid">
            {services.length > 0 ? (
              services.map((service, index) => (
                <div key={service._id || index} className="service-card">
                  <div className="service-icon">{service.icon || 'üöÄ'}</div>
                  <h3>{service.title}</h3>
                  <p>{service.description}</p>
                  {service.price && <div className="service-price">${service.price}</div>}
                </div>
              ))
            ) : (
              <p>No services data available. Services array length: {services.length}</p>
            )}
          </div>
        </div>
      </section>

      {/* Projects Section */}
      <section id="projects" className="section projects-section">
        <div className="container">
          <div className="section-header">
            <h2>Projects</h2>
            <a href="/projects" className="view-all-link">View All</a>
          </div>
          <div className="projects-grid">
            {projects.length > 0 ? (
              projects.map((project, index) => (
                <div key={project._id || index} className="project-card">
                  {project.image && (
                    <img src={project.image} alt={project.title} className="project-image" />
                  )}
                  <div className="project-content">
                    <h3>{project.title}</h3>
                    <p>{project.description}</p>
                    {project.technologies && (
                      <div className="project-tech">
                        {project.technologies.slice(0, 3).map((tech, techIndex) => (
                          <span key={techIndex} className="tech-tag">{tech}</span>
                        ))}
                      </div>
                    )}
                    <div className="project-links">
                      {project.githubUrl && (
                        <a href={project.githubUrl} target="_blank" rel="noopener noreferrer" className="project-link">
                          GitHub
                        </a>
                      )}
                      {project.liveUrl && (
                        <a href={project.liveUrl} target="_blank" rel="noopener noreferrer" className="project-link">
                          Live Demo
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p>No projects data available. Projects array length: {projects.length}</p>
            )}
          </div>
        </div>
      </section>

      {/* Experience Section */}
      <section id="experience" className="section experience-section">
        <div className="container">
          <div className="section-header">
            <h2>Experience</h2>
            <a href="/experience" className="view-all-link">View All</a>
          </div>
          <div className="experience-list">
            {experience.length > 0 ? (
              experience.map((exp, index) => (
                <div key={exp._id || index} className="experience-item">
                  <div className="experience-content">
                    <h3>{exp.position}</h3>
                    <h4>{exp.company}</h4>
                    <div className="experience-meta">
                      <span className="experience-dates">
                        {exp.startDate} - {exp.endDate || 'Present'}
                      </span>
                      {exp.location && (
                        <span className="experience-location">{exp.location}</span>
                      )}
                    </div>
                    <p>{exp.description}</p>
                    {exp.technologies && (
                      <div className="experience-tech">
                        {exp.technologies.slice(0, 4).map((tech, techIndex) => (
                          <span key={techIndex} className="tech-tag">{tech}</span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <p>No experience data available. Experience array length: {experience.length}</p>
            )}
          </div>
        </div>
      </section>

      {/* Education Section */}
      <section id="education" className="section education-section">
        <div className="container">
          <div className="section-header">
            <h2>Education</h2>
            <a href="/education" className="view-all-link">View All</a>
          </div>
          <div className="education-grid">
            {education.map((edu, index) => (
              <div key={edu._id || index} className="education-card">
                <h3>{edu.degree}</h3>
                <h4>{edu.institution}</h4>
                <div className="education-meta">
                  <span>{edu.startYear} - {edu.endYear || 'Present'}</span>
                  {edu.grade && <span>Grade: {edu.grade}</span>}
                </div>
                {edu.description && <p>{edu.description}</p>}
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Blogs Section */}
      <section id="blogs" className="section blogs-section">
        <div className="container">
          <div className="section-header">
            <h2>Blogs</h2>
            <a href="/blogs" className="view-all-link">View All</a>
          </div>
          <div className="blogs-grid">
            {blogs.map((blog, index) => (
              <div key={blog._id || index} className="blog-card">
                {blog.image && (
                  <img src={blog.image} alt={blog.title} className="blog-image" />
                )}
                <div className="blog-content">
                  <div className="blog-meta">
                    {blog.category && (
                      <span className="blog-category">{blog.category}</span>
                    )}
                    <span className="blog-date">
                      {new Date(blog.publishDate || blog.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  <h3>{blog.title}</h3>
                  <p>{blog.excerpt || blog.description}</p>
                  {blog.tags && (
                    <div className="blog-tags">
                      {blog.tags.slice(0, 3).map((tag, tagIndex) => (
                        <span key={tagIndex} className="blog-tag">{tag}</span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="section contact-section">
        <div className="container">
          <div className="section-header">
            <h2>
              {contactInfo?.callToAction?.title || "Let's Work Together"}
            </h2>
            <p className="section-subtitle">
              {contactInfo?.callToAction?.subtitle || "Have a project in mind? Let's discuss how we can bring your ideas to life."}
            </p>
          </div>
          
          <div className="contact-content-redesign">
            {/* Contact Information Cards */}
            <div className="contact-cards-grid">
              
              {/* Professional Status Card */}
              {contactInfo?.availability && contactInfo.displaySettings?.showAvailability && (
                <div className="contact-card status-card">
                  <div className="card-header">
                    <h3>Current Status</h3>
                    <span className="status-indicator">
                      {contactInfo.availability === 'available' ? 'üü¢' : 
                       contactInfo.availability === 'busy' ? 'üü°' : 
                       contactInfo.availability === 'open' ? 'üíº' : 'üî¥'}
                    </span>
                  </div>
                  <div className="card-content">
                    <p className="status-text">
                      {contactInfo.availability === 'available' ? 'Available for New Projects' : 
                       contactInfo.availability === 'busy' ? 'Currently Busy (Limited Availability)' : 
                       contactInfo.availability === 'open' ? 'Open to Opportunities' : 'Currently Unavailable'}
                    </p>
                    {contactInfo.responseTime && (
                      <p className="response-info">
                        <span className="icon">‚è±Ô∏è</span>
                        Response time: {contactInfo.responseTime}
                      </p>
                    )}
                    {contactInfo.timezone && (
                      <p className="timezone-info">
                        <span className="icon">üåç</span>
                        {contactInfo.timezone}
                      </p>
                    )}
                  </div>
                </div>
              )}

              {/* Contact Methods Card */}
              {contactInfo && (contactInfo.email || contactInfo.phone || contactInfo.alternateEmail || contactInfo.alternatePhone) && (
                <div className="contact-card methods-card">
                  <div className="card-header">
                    <h3>Contact Methods</h3>
                    <span className="card-icon">üìû</span>
                  </div>
                  <div className="card-content">
                    <div className="contact-methods">
                      {contactInfo.email && contactInfo.displaySettings?.showEmail && (
                        <div className="contact-method">
                          <span className="method-icon">üìß</span>
                          <div className="method-info">
                            <span className="method-label">
                              Email
                              {contactInfo.preferredContactMethod === 'email' && <span className="preferred">‚ú® Preferred</span>}
                            </span>
                            <a href={`mailto:${contactInfo.email}`} className="method-link">
                              {contactInfo.email}
                            </a>
                          </div>
                        </div>
                      )}
                      
                      {contactInfo.alternateEmail && contactInfo.displaySettings?.showEmail && (
                        <div className="contact-method">
                          <span className="method-icon">üìß</span>
                          <div className="method-info">
                            <span className="method-label">Alternate Email</span>
                            <a href={`mailto:${contactInfo.alternateEmail}`} className="method-link">
                              {contactInfo.alternateEmail}
                            </a>
                          </div>
                        </div>
                      )}
                      
                      {contactInfo.phone && contactInfo.displaySettings?.showPhone && (
                        <div className="contact-method">
                          <span className="method-icon">üì±</span>
                          <div className="method-info">
                            <span className="method-label">
                              Phone
                              {contactInfo.preferredContactMethod === 'phone' && <span className="preferred">‚ú® Preferred</span>}
                            </span>
                            <a href={`tel:${contactInfo.phone}`} className="method-link">
                              {contactInfo.phone}
                            </a>
                          </div>
                        </div>
                      )}
                      
                      {contactInfo.alternatePhone && contactInfo.displaySettings?.showPhone && (
                        <div className="contact-method">
                          <span className="method-icon">üì±</span>
                          <div className="method-info">
                            <span className="method-label">Alternate Phone</span>
                            <a href={`tel:${contactInfo.alternatePhone}`} className="method-link">
                              {contactInfo.alternatePhone}
                            </a>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Location & Details Card */}
              {contactInfo?.address && contactInfo.displaySettings?.showAddress && (
                <div className="contact-card location-card">
                  <div className="card-header">
                    <h3>Location</h3>
                    <span className="card-icon">üìç</span>
                  </div>
                  <div className="card-content">
                    <div className="location-info">
                      {contactInfo.address.street && <p>{contactInfo.address.street}</p>}
                      {contactInfo.address.city && contactInfo.address.state && (
                        <p>{contactInfo.address.city}, {contactInfo.address.state}</p>
                      )}
                      {contactInfo.address.zipCode && <p>{contactInfo.address.zipCode}</p>}
                      {contactInfo.address.country && <p>{contactInfo.address.country}</p>}
                    </div>
                  </div>
                </div>
              )}

              {/* Social Networks Card */}
              {contactInfo?.socialLinks && contactInfo.displaySettings?.showSocialLinks && 
               Object.values(contactInfo.socialLinks).some(link => link && link.trim() !== '') && (
                <div className="contact-card social-card">
                  <div className="card-header">
                    <h3>Social Networks</h3>
                    <span className="card-icon">üåê</span>
                  </div>
                  <div className="card-content">
                    <div className="social-networks">
                      {contactInfo.socialLinks.linkedin && contactInfo.socialLinks.linkedin.trim() !== '' && (
                        <a href={contactInfo.socialLinks.linkedin} target="_blank" rel="noopener noreferrer" className="social-network linkedin">
                          <span className="network-icon">üíº</span>
                          <span className="network-name">LinkedIn</span>
                          {contactInfo.preferredContactMethod === 'linkedin' && <span className="preferred-star">‚≠ê</span>}
                        </a>
                      )}
                      {contactInfo.socialLinks.github && contactInfo.socialLinks.github.trim() !== '' && (
                        <a href={contactInfo.socialLinks.github} target="_blank" rel="noopener noreferrer" className="social-network github">
                          <span className="network-icon">üêô</span>
                          <span className="network-name">GitHub</span>
                        </a>
                      )}
                      {contactInfo.socialLinks.twitter && contactInfo.socialLinks.twitter.trim() !== '' && (
                        <a href={contactInfo.socialLinks.twitter} target="_blank" rel="noopener noreferrer" className="social-network twitter">
                          <span className="network-icon">üê¶</span>
                          <span className="network-name">Twitter</span>
                        </a>
                      )}
                      {contactInfo.socialLinks.youtube && contactInfo.socialLinks.youtube.trim() !== '' && (
                        <a href={contactInfo.socialLinks.youtube} target="_blank" rel="noopener noreferrer" className="social-network youtube">
                          <span className="network-icon">üì∫</span>
                          <span className="network-name">YouTube</span>
                        </a>
                      )}
                      {contactInfo.socialLinks.instagram && contactInfo.socialLinks.instagram.trim() !== '' && (
                        <a href={contactInfo.socialLinks.instagram} target="_blank" rel="noopener noreferrer" className="social-network instagram">
                          <span className="network-icon">üì∑</span>
                          <span className="network-name">Instagram</span>
                        </a>
                      )}
                      {contactInfo.socialLinks.facebook && contactInfo.socialLinks.facebook.trim() !== '' && (
                        <a href={contactInfo.socialLinks.facebook} target="_blank" rel="noopener noreferrer" className="social-network facebook">
                          <span className="network-icon">üìò</span>
                          <span className="network-name">Facebook</span>
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Business Hours Card */}
              {contactInfo?.businessHours && contactInfo.displaySettings?.showBusinessHours && 
               Object.values(contactInfo.businessHours).some(hours => hours && hours !== 'Closed') && (
                <div className="contact-card hours-card">
                  <div className="card-header">
                    <h3>Business Hours</h3>
                    <span className="card-icon">‚è∞</span>
                  </div>
                  <div className="card-content">
                    <div className="business-hours-list">
                      {Object.entries(contactInfo.businessHours).map(([day, hours]) => (
                        hours && hours !== 'Closed' && (
                          <div key={day} className="hours-item">
                            <span className="day-name">{day.charAt(0).toUpperCase() + day.slice(1)}</span>
                            <span className="hours-time">{hours}</span>
                          </div>
                        )
                      ))}
                    </div>
                  </div>
                </div>
              )}

              {/* Quick Contact Card */}
              <div className="contact-card quick-contact-card">
                <div className="card-header">
                  <h3>Get In Touch</h3>
                  <span className="card-icon">‚ú®</span>
                </div>
                <div className="card-content">
                  <p className="quick-contact-text">
                    Ready to start your project? Send me a message and let's discuss your ideas.
                  </p>
                  <div className="quick-actions">
                    {contactInfo?.email && (
                      <a href={`mailto:${contactInfo.email}`} className="quick-action primary">
                        <span className="action-icon">üìß</span>
                        <span className="action-text">Send Email</span>
                      </a>
                    )}
                    {profile?.resume && (
                      <a href={profile.resume} target="_blank" rel="noopener noreferrer" className="quick-action secondary">
                        <span className="action-icon">üìÑ</span>
                        <span className="action-text">View Resume</span>
                      </a>
                    )}
                  </div>
                  {contactInfo?.responseTime && (
                    <p className="response-note">
                      üí¨ {contactInfo?.responseTime 
                        ? `I typically respond within ${contactInfo.responseTime}` 
                        : 'I typically respond within 24 hours'
                      }
                    </p>
                  )}
                </div>
              </div>

            </div>

            {/* Contact Form - Redesigned */}
            <div className="contact-form-redesign">
              <div className="form-wrapper">
                <div className="form-header">
                  <h3>Send Me a Message</h3>
                  <p>Have a question or want to work together? I'd love to hear from you!</p>
                </div>
                
                <form onSubmit={handleContactSubmit} className="contact-form modern-redesign">
                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="name">Full Name *</label>
                      <input
                        id="name"
                        type="text"
                        name="name"
                        placeholder="Enter your full name"
                        value={contactForm.name}
                        onChange={handleContactInputChange}
                        required
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="email">Email Address *</label>
                      <input
                        id="email"
                        type="email"
                        name="email"
                        placeholder="Enter your email address"
                        value={contactForm.email}
                        onChange={handleContactInputChange}
                        required
                      />
                    </div>
                  </div>
                  
                  <div className="form-group full-width">
                    <label htmlFor="subject">Subject *</label>
                    <input
                      id="subject"
                      type="text"
                      name="subject"
                      placeholder="What's this about?"
                      value={contactForm.subject}
                      onChange={handleContactInputChange}
                      required
                    />
                  </div>
                  
                  <div className="form-group full-width">
                    <label htmlFor="message">Message *</label>
                    <textarea
                      id="message"
                      name="message"
                      placeholder="Tell me about your project or inquiry..."
                      rows="6"
                      value={contactForm.message}
                      onChange={handleContactInputChange}
                      required
                    ></textarea>
                  </div>
                  
                  <div className="form-actions">
                    <button 
                      type="submit" 
                      className="submit-btn redesign"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? (
                        <>
                          <span className="spinner"></span>
                          <span>Sending...</span>
                        </>
                      ) : (
                        <>
                          <span>{contactInfo?.callToAction?.buttonText || 'Send Message'}</span>
                          <span className="btn-icon">‚Üí</span>
                        </>
                      )}
                    </button>
                  </div>
                  
                  {contactStatus.message && (
                    <div className={`status-message ${contactStatus.type}`}>
                      <div className="status-icon">
                        {contactStatus.type === 'success' ? '‚úÖ' : '‚ùå'}
                      </div>
                      <div className="status-text">
                        {contactStatus.message}
                      </div>
                    </div>
                  )}
                </form>
                
                <div className="form-footer">
                  <p>
                    {contactInfo?.responseTime 
                      ? `I typically respond within ${contactInfo.responseTime}.` 
                      : 'I typically respond within 24 hours.'
                    } Looking forward to hearing from you!
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default PortfolioSite
                <h3>Get In Touch</h3>
                <p>Ready to start your next project? Drop me a line and let's create something amazing together.</p>
                
                {/* Professional Availability Status */}
                {contactInfo?.availability && contactInfo.displaySettings?.showAvailability && (
                  <div className="availability-status modern">
                    <div className="status-indicator">
                      <span className="status-dot">
                        {contactInfo.availability === 'available' ? 'üü¢' : 
                         contactInfo.availability === 'busy' ? 'üü°' : 
                         contactInfo.availability === 'open' ? 'üíº' : 'üî¥'}
                      </span>
                      <div className="status-text">
                        <strong>
                          {contactInfo.availability === 'available' ? 'Available for New Projects' : 
                           contactInfo.availability === 'busy' ? 'Currently Busy (Limited Availability)' : 
                           contactInfo.availability === 'open' ? 'Open to Opportunities' : 'Currently Unavailable'}
                        </strong>
                        {contactInfo.responseTime && (
                          <span className="response-time">
                            Typical response time: {contactInfo.responseTime}
                          </span>
                        )}
                        {contactInfo.timezone && (
                          <span className="timezone">
                            Timezone: {contactInfo.timezone}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
              
              {contactInfo && (
                <div className="contact-info-display">
                  <div className="contact-details">
                    <div className="contact-items">
                      {/* Primary Email */}
                      {contactInfo.email && contactInfo.displaySettings?.showEmail && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üìß</span>
                          </div>
                          <div className="contact-text">
                            <strong>Primary Email</strong>
                            <a href={`mailto:${contactInfo.email}`} className="contact-link">
                              {contactInfo.email}
                            </a>
                            {contactInfo.preferredContactMethod === 'email' && (
                              <span className="preferred-badge">Preferred</span>
                            )}
                          </div>
                        </div>
                      )}

                      {/* Alternate Email */}
                      {contactInfo.alternateEmail && contactInfo.displaySettings?.showEmail && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üìß</span>
                          </div>
                          <div className="contact-text">
                            <strong>Alternate Email</strong>
                            <a href={`mailto:${contactInfo.alternateEmail}`} className="contact-link">
                              {contactInfo.alternateEmail}
                            </a>
                          </div>
                        </div>
                      )}
                      
                      {/* Primary Phone */}
                      {contactInfo.phone && contactInfo.displaySettings?.showPhone && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üì±</span>
                          </div>
                          <div className="contact-text">
                            <strong>Phone</strong>
                            <a href={`tel:${contactInfo.phone}`} className="contact-link">
                              {contactInfo.phone}
                            </a>
                            {contactInfo.preferredContactMethod === 'phone' && (
                              <span className="preferred-badge">Preferred</span>
                            )}
                          </div>
                        </div>
                      )}

                      {/* Alternate Phone */}
                      {contactInfo.alternatePhone && contactInfo.displaySettings?.showPhone && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üì±</span>
                          </div>
                          <div className="contact-text">
                            <strong>Alternate Phone</strong>
                            <a href={`tel:${contactInfo.alternatePhone}`} className="contact-link">
                              {contactInfo.alternatePhone}
                            </a>
                          </div>
                        </div>
                      )}
                      
                      {/* Address */}
                      {contactInfo.address && contactInfo.displaySettings?.showAddress && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üè†</span>
                          </div>
                          <div className="contact-text">
                            <strong>Location</strong>
                            <span>
                              {contactInfo.address.street && <>{contactInfo.address.street}<br /></>}
                              {contactInfo.address.city && contactInfo.address.state && 
                                `${contactInfo.address.city}, ${contactInfo.address.state}`
                              }
                              {contactInfo.address.zipCode && ` ${contactInfo.address.zipCode}`}
                              {contactInfo.address.country && <><br />{contactInfo.address.country}</>}
                            </span>
                          </div>
                        </div>
                      )}

                      {/* Professional Links */}
                      {contactInfo.website && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üåê</span>
                          </div>
                          <div className="contact-text">
                            <strong>Website</strong>
                            <a href={contactInfo.website} target="_blank" rel="noopener noreferrer" className="contact-link">
                              {contactInfo.website}
                            </a>
                          </div>
                        </div>
                      )}

                      {contactInfo.resume && (
                        <div className="contact-item modern">
                          <div className="contact-icon-wrapper">
                            <span className="contact-icon">üìÑ</span>
                          </div>
                          <div className="contact-text">
                            <strong>Resume</strong>
                            <a href={contactInfo.resume} target="_blank" rel="noopener noreferrer" className="contact-link">
                              View Resume
                            </a>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Enhanced Social Links */}
                    {contactInfo.socialLinks && contactInfo.displaySettings?.showSocialLinks && (
                      <div className="social-links-section modern">
                        <h4>Connect With Me</h4>
                        <div className="social-links-grid modern">
                          {contactInfo.socialLinks.linkedin && (
                            <a href={contactInfo.socialLinks.linkedin} target="_blank" rel="noopener noreferrer" className="social-link linkedin modern" title="LinkedIn">
                              <span className="social-icon">ÔøΩ</span>
                              <span className="social-text">LinkedIn</span>
                              {contactInfo.preferredContactMethod === 'linkedin' && (
                                <span className="preferred-indicator">‚≠ê</span>
                              )}
                            </a>
                          )}
                          {contactInfo.socialLinks.github && (
                            <a href={contactInfo.socialLinks.github} target="_blank" rel="noopener noreferrer" className="social-link github modern" title="GitHub">
                              <span className="social-icon">ÔøΩ</span>
                              <span className="social-text">GitHub</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.twitter && (
                            <a href={contactInfo.socialLinks.twitter} target="_blank" rel="noopener noreferrer" className="social-link twitter modern" title="Twitter">
                              <span className="social-icon">ÔøΩ</span>
                              <span className="social-text">Twitter</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.instagram && (
                            <a href={contactInfo.socialLinks.instagram} target="_blank" rel="noopener noreferrer" className="social-link instagram modern" title="Instagram">
                              <span className="social-icon">ÔøΩ</span>
                              <span className="social-text">Instagram</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.facebook && (
                            <a href={contactInfo.socialLinks.facebook} target="_blank" rel="noopener noreferrer" className="social-link facebook modern" title="Facebook">
                              <span className="social-icon">ÔøΩ</span>
                              <span className="social-text">Facebook</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.youtube && (
                            <a href={contactInfo.socialLinks.youtube} target="_blank" rel="noopener noreferrer" className="social-link youtube modern" title="YouTube">
                              <span className="social-icon">üì∫</span>
                              <span className="social-text">YouTube</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.behance && (
                            <a href={contactInfo.socialLinks.behance} target="_blank" rel="noopener noreferrer" className="social-link behance modern" title="Behance">
                              <span className="social-icon">üé®</span>
                              <span className="social-text">Behance</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.dribbble && (
                            <a href={contactInfo.socialLinks.dribbble} target="_blank" rel="noopener noreferrer" className="social-link dribbble modern" title="Dribbble">
                              <span className="social-icon">üèÄ</span>
                              <span className="social-text">Dribbble</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.medium && (
                            <a href={contactInfo.socialLinks.medium} target="_blank" rel="noopener noreferrer" className="social-link medium modern" title="Medium">
                              <span className="social-icon">üìù</span>
                              <span className="social-text">Medium</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.devto && (
                            <a href={contactInfo.socialLinks.devto} target="_blank" rel="noopener noreferrer" className="social-link devto modern" title="Dev.to">
                              <span className="social-icon">üë®‚Äçüíª</span>
                              <span className="social-text">Dev.to</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.stackoverflow && (
                            <a href={contactInfo.socialLinks.stackoverflow} target="_blank" rel="noopener noreferrer" className="social-link stackoverflow modern" title="Stack Overflow">
                              <span className="social-icon">üîß</span>
                              <span className="social-text">Stack Overflow</span>
                            </a>
                          )}
                          {contactInfo.socialLinks.discord && (
                            <a href={contactInfo.socialLinks.discord} target="_blank" rel="noopener noreferrer" className="social-link discord modern" title="Discord">
                              <span className="social-icon">üéÆ</span>
                              <span className="social-text">Discord</span>
                            </a>
                          )}
                        </div>
                      </div>
                    )}
                    
                    {/* Business Hours */}
                    {contactInfo.businessHours && contactInfo.displaySettings?.showBusinessHours && 
                      Object.values(contactInfo.businessHours).some(hours => hours && hours !== 'Closed') && (
                      <div className="business-hours-section modern">
                        <h4>‚è∞ Business Hours</h4>
                        <div className="business-hours modern">
                          {Object.entries(contactInfo.businessHours).map(([day, hours]) => (
                            hours && hours !== 'Closed' && (
                              <div key={day} className="business-hour modern">
                                <span className="day">{day.charAt(0).toUpperCase() + day.slice(1)}</span>
                                <span className="hours">{hours}</span>
                              </div>
                            )
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
            
            {/* Enhanced Contact Form */}
            <div className="contact-form-section modern">
              <div className="form-header">
                <h3>Send Me a Message</h3>
                <p>Have a question or want to work together? I'd love to hear from you!</p>
              </div>
              
              <form onSubmit={handleContactSubmit} className="contact-form modern">
                <div className="form-row">
                  <div className="form-group modern">
                    <label htmlFor="name">Full Name *</label>
                    <input
                      id="name"
                      type="text"
                      name="name"
                      placeholder="Enter your full name"
                      value={contactForm.name}
                      onChange={handleContactInputChange}
                      required
                    />
                  </div>
                  <div className="form-group modern">
                    <label htmlFor="email">Email Address *</label>
                    <input
                      id="email"
                      type="email"
                      name="email"
                      placeholder="Enter your email address"
                      value={contactForm.email}
                      onChange={handleContactInputChange}
                      required
                    />
                  </div>
                </div>
                
                <div className="form-group modern full-width">
                  <label htmlFor="subject">Subject *</label>
                  <input
                    id="subject"
                    type="text"
                    name="subject"
                    placeholder="What's this about?"
                    value={contactForm.subject}
                    onChange={handleContactInputChange}
                    required
                  />
                </div>
                
                <div className="form-group modern full-width">
                  <label htmlFor="message">Message *</label>
                  <textarea
                    id="message"
                    name="message"
                    placeholder="Tell me about your project or inquiry..."
                    rows="6"
                    value={contactForm.message}
                    onChange={handleContactInputChange}
                    required
                  ></textarea>
                </div>
                
                <div className="form-actions">
                  <button 
                    type="submit" 
                    className="submit-btn modern"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <span className="spinner modern"></span>
                        <span>Sending...</span>
                      </>
                    ) : (
                      <>
                        <span>{contactInfo?.callToAction?.buttonText || 'Send Message'}</span>
                        <span className="btn-icon">‚Üí</span>
                      </>
                    )}
                  </button>
                </div>
                
                {contactStatus.message && (
                  <div className={`status-message modern ${contactStatus.type}`}>
                    <div className="status-icon">
                      {contactStatus.type === 'success' ? '‚úÖ' : '‚ùå'}
                    </div>
                    <div className="status-text">
                      {contactStatus.message}
                    </div>
                  </div>
                )}
              </form>
              
              <div className="form-footer">
                <p>
                  {contactInfo?.responseTime 
                    ? `I typically respond within ${contactInfo.responseTime}.` 
                    : 'I typically respond within 24 hours.'
                  } Looking forward to hearing from you!
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default PortfolioSite